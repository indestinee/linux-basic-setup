set nocompatible

filetype plugin indent on

syntax on
" @vundle {{{
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'dense-analysis/ale'
Plugin 'airblade/vim-gitgutter'
Plugin 'tpope/vim-commentary'
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
Plugin 'iamcco/mathjax-support-for-mkdp'
Plugin 'iamcco/markdown-preview.vim'
Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
Plugin 'vim-airline/vim-airline'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'junegunn/fzf.vim'
Plugin 'honza/vim-snippets'
Plugin 'SirVer/ultisnips'
Bundle 'Valloric/YouCompleteMe'
call vundle#end()
" }}}

" @fzf {{{
set rtp+=~/.fzf
" }}}

" @ctrlp{{{
" show recently opened files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux"
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
    \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
"}}}

" @nerdtree {{{
let NERDTreeShowLineNumbers=1
let NERDTreeAutoCenter=1
let NERDTreeIgnore=['\.pyc', '\~$', '\.swp']

" open NERDTree automatically when vim starts up with no file specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" open NERDTree automatically when vim starts up on opening a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" }}}

" @youcompleteme {{{
let g:ycm_auto_trigger=1
let g:ycm_add_preview_to_completeopt=1
let g:ycm_min_num_of_chars_for_completion=2
let g:ycm_autoclose_preview_window_after_insertion=1
let g:ycm_autoclose_preview_window_after_completion=0
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

let g:ycm_semantic_triggers =  {
  \   'c': ['->', '.', 're![a-zA-Z][a-zA-Z0-9]'],
  \   'objc': ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
  \            're!\[.*\]\s'],
  \   'ocaml': ['.', '#'],
  \   'cpp,cuda,objcpp': ['->', '.', '::', 're![a-zA-Z][a-zA-Z0-9]'],
  \   'perl': ['->'],
  \   'php': ['->', '::'],
  \   'cs,d,elixir,go,groovy,java,javascript,julia,perl6,python,scala,typescript,vb': ['.'],
  \   'ruby,rust': ['.', '::'],
  \   'lua': ['.', ':'],
  \   'erlang': [':'],
  \ }
let g:ycm_use_clangd = 0
let g:ycm_error_symbol = '>>'
let g:ycm_warning_symbol = '>>'
let g:ycm_enable_diagnostic_signs = 1
let g:ycm_enable_diagnostic_highlighting = 1
" highlight YcmErrorLine guibg=#3fff00
" highlight YcmErrorSection guibg=#3fff00
" hi ErrorMsg term=standout ctermbg=DarkRed ctermfg=White guibg=Red guifg=White
" highlight YcmErrorSign term=standout guibg=#ff0000

nnoremap ga :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap gs :YcmCompleter GoToDeclaration<CR>
nnoremap gd :YcmCompleter GetDoc<CR>
nnoremap gf :YcmCompleter FixIt<CR>
nnoremap gz :YcmCompleter GoToInclude<CR>
" }}}

" @ultisnips {{{
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-f>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
set runtimepath+=~/.vim/my-snippets

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" }}}

" @airline{{{
let g:airline_section_b = '%{strftime("%Y/%m/%d %H:%M:%S")}'
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#show_tab_nr=1
let g:airline#extensions#tabline#tab_nr_type=1
" }}}

" @airline {{{
let g:airline_section_b = '%{strftime("%Y/%m/%d %H:%M:%S")}'
"}}}

" @git {{{
let g:gitgutter_max_signs = 500
highlight GitGutterAdd    guifg=#44ff44 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1
" }}}
" @ale {{{
let g:ale_completion_enabled = 1
let g:ale_sign_column_always = 1
" let g:ale_set_highlights = 0
highlight clear ALEErrorSign
highlight clear ALEWarningSign
highlight ALEWarningSign ctermfg=166
highlight ALEWarning ctermfg=166 cterm=underline,bold
highlight ALEErrorSign ctermfg=1
highlight ALEError ctermfg=1 cterm=underline,bold

let g:ale_linters= {
\   'python': ['pylint'],
\}
let g:ale_python_pylint_options = ''

let g:ale_sign_error = 'xx'
let g:ale_sign_warning = '>>'
let g:airline#extensions#ale#enabled = 1

let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] [%severity%] %s '
" }}}

" @vimset {{{
syntax on

au BufNewFile,BufRead string,map,set,unordered_map,unordered_set,vector,deque,queue,list,algorithm,stack setf cpp

let line='normal'
set number

set expandtab
set sts=4 sw=4 ts=4
autocmd FileType html set sts=2 sw=2 ts=2
autocmd FileType javascript set sts=2 sw=2 ts=2

set colorcolumn=81
highlight ColorColumn ctermbg=gray


" @serach
set hls
set incsearch
set ignorecase

set fileencodings=utf-8,gb2312,gbk,gb18030

" @folder
set foldcolumn=4
set foldenable
set foldlevel=100
set foldmethod=marker

set showcmd

" @mouse
set mouse=a
set selection=exclusive
set selectmode=mouse,key

set title
set backupcopy=yes
set backspace=indent,eol,start
set clipboard=unnamed
set autochdir
set autoindent
set nobackup
set pastetoggle=``
set shortmess=atl
set ttyfast
" }}}

" @shortcut {{{
:command W w
:command WQ wq
:command Wq wq
:command Q q

nmap <F2> :call TurnOnGit()<CR>
nmap <F3> :call SwitchNum()<CR>
nmap <F4> :Commentary<CR>
nmap <F5> :NERDTreeToggle<CR>
nmap <F6> :TagbarToggle<CR>

map <F9>      : call Compile()<CR>
map <F10>     : call Run()<CR>

nmap <s-tab> <<
nmap <tab> >>
" }}}

let g:githighlight=0
function TurnOnGit() " {{{
    if g:githighlight == 0
        exec 'GitGutterLineHighlightsEnable'
        let g:githighlight = 1
    else
        exec 'GitGutterLineHighlightsDisable'
        let g:githighlight = 0
    endif
endfunction
" }}}
function SwitchNum() " {{{
    if &rnu == 1
        exec ':set nornu'
    else
        exec ':set rnu'
    endif
endfunc
" }}}

function Compile() " {{{
    exec "w"
    if &filetype == "c" || &filetype == "h"
        exec ":! clear; gcc % -o %:r -Wall; if [ $? = 0 ]; then echo '\033[1;32;m[SUC] Compile Succeed..\033[0m'; else echo '\033[1;31;m[ERR] Compile Error..\033[0m'; fi;"
    elseif &filetype == "cpp" || &filetype == "hpp"
        exec ":! clear; g++ % -o %:r -Wall; if [ $? = 0 ]; then echo '\033[1;32;m[SUC] Compile Succeed..\033[0m'; else echo '\033[1;31;m[ERR] Compile Error..\033[0m'; fi;"
    elseif &filetype == "python"
        exec ":! clear; python3 %"
    elseif &filetype == "sh"
        exec ":! chmod +x %"
    endif
endfunction
" }}}

function Run() " {{{
    if &filetype == "cpp" || &filetype == "c"
        exec ":! clear; ./%:r;"
    elseif &filetype == "sh"
        exec ":! clear; ./%"
    elseif &filetype == "python"
        exec ":! clear; python3 %"
    endif
endfunction
" }}}
